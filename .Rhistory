boxplot(trees$Volume, main = "Árvores", xlab = "Volume")
# Horizontal - Muda a orientação do boxplot para horizontal
boxplot(trees$Volume, main = "Árvores", xlab = "Volume", col = "yellow", horizontal = TRUE)
boxplot(trees$Volume, main = "Árvores", xlab = "Volume")
# Horizontal - Muda a orientação do boxplot para horizontal
boxplot(trees$Volume, main = "Árvores", xlab = "Volume", col = "yellow", horizontal = TRUE)
boxplot(trees$Volume, main = "Árvores", xlab = "Volume", col = "blue", outline = F)
#notch
boxplot(trees$Height, main = "Árvores", xlab = "Altura", notch = TRUE)
#Dados do gráfico
boxplot.stats(trees$Girth)
#Ver apenas uma informação
boxplot.stats(trees$Girth)$stats
#O box plot pode compara várias variáveis numéricas ao mesmo tempo
boxplot(trees)
# Para usar os gráficos de barras e de setor (pizza) com o conjunto de dados a seguir, será necessário agregar os dados
InsectSprays
spray = aggregate(.~spray, data = InsectSprays, sum)
spray
# Gráfico de barras
barplot(spray$count, col = gray.colors(6), xlab = "Spray", ylab = "Total", names.arg = spray$spray)
source("~/R-práticas/Visualização_de_dados/PraticaDeVisualizacao.R", echo=TRUE)
spray = aggregate(.~spray, data = InsectSprays, sum)
#O box plot pode compara várias variáveis numéricas ao mesmo tempo
boxplot(trees)
barplot(spray$count, col = gray.colors(6), xlab = "Spray", ylab = "Total", names.arg = spray$spray)
box()
# Gráfico de setor - pizza
pie(spray$count, labels = spray$spray, main = "Spray", col = c(1:6))
# Gráfico de setor - pizza
pie(spray$count, labels = spray$spray, main = "Spray", col = gray.colors(6))
# Gráfico de setor - pizza
pie(spray$count, labels = spray$spray, main = "Spray", col = pink.colors(6))
# Gráfico de setor - pizza
pie(spray$count, labels = spray$spray, main = "Spray", col = Pink.colors(6))
# Gráfico de setor - pizza
pie(spray$count, labels = spray$spray, main = "Spray", col = red.colors(6))
# Gráfico de setor - pizza
pie(spray$count, labels = spray$spray, main = "Spray", col = rad.colors(6))
#Ver apenas uma informação
boxplot.stats(trees$Girth)$stats
# Gráfico de setor - pizza
pie(spray$count, labels = spray$spray, main = "Spray", col = gray.colors(6))
# Gráfico de setor - pizza
pie(spray$count, labels = spray$spray, main = "Spray", col = c(1:6))
pie(spray$count, labels = NA, main = "Spray", col = c(1:6))
legend("bottomright", legend = spray$spray, cel = 1, fill = c(1:6))
pie(spray$count, labels = NA, main = "Spray", col = c(1:6))
legend("bottomright", legend = spray$spray, cex = 1, fill = c(1:6))
installed.packages("stargazer")
library(stargazer)
install.packages("stargazer")
library(stargazer)
# Formato Latex
stargazer(iris)
stargazer(iris, type="html")
# texto
stargazer(iris, type="text")
# Salva em Disco
stargazer(women, out="women.tex", summary=FALSE)
#boxplot
bwplot(trees$Volume)
#Não é necessário instalar o Lattice, mas é necessário carregá-lo
library(lattice)
#boxplot
bwplot(trees$Volume)
bwplot(trees$Volume, main = "Árvores", xlab = "Volume", col = pink)
bwplot(trees$Volume, main = "Árvores", xlab = "Volume")
#histograma
# type define a forma como as barras serão calculados ("percent", "count" e "density") e nint é o número de eixos
histogram(trees$Volume, main = "Árvores", xlab = "Volume", aspect = 1, type = "percent", nint=20)
#histograma condicional
#Peso das galinhas de acordo com alimentação
chickwts
#histograma condicional
#Peso das galinhas de acordo com alimentação
chickwts
#histograma
histogram(chickwts$weight)
#agregamos dados
aggregate(chickwts$weight, by=list(chickwts$feed), FUN=sum)
#histograma condicional
#histograma condicional
histogram(~weight | feed, data=chickwts)
plot(Densidade)
plot(trees$Girth, trees$Volume) # Cria um gráfico de dispersão
xyplot(CO2$conc ~ CO2$uptake)
#type é a origem (condicional quanto à origem)
xyplot(CO2$conc ~ CO2$uptake | CO2$Type)
#condiciona se é refrigerado ou não
xyplot(CO2$conc ~ CO2$Treatment)
#condiciona se é refrigerado ou não
xyplot(CO2$conc ~ CO2$uptake | CO2$Treatment)
dotplot(esoph$alcgp ~ esoph$ncontrols, data = esoph)
dotplot(esoph$alcgp ~ esoph$ncontrols | esoph$tobgp)
# Matriz de dispersão
splom(~CO2[4:5] | CO2$Type, CO2)
source("~/R-práticas/Visualização_de_dados/PraticaDeVisualizacao_lattice.R", echo=TRUE)
#Densidade condicional
densityplot(~CO2$conc | CO2$Treatment, plot.points = FALSE)
densityplot(~CO2$conc)
densityplot(~CO2$conc | CO2$Treatment)
densityplot(~CO2$conc | CO2$Treatment, plot.points = FALSE)
#Gráfico 3D
#Spray para repelir abelhas
OrchardSprays
cloud(~decrease, colpos*rowpos, groups = treatment, data = OrchardSprays)
#Gráfico 3D
#Spray para repelir abelhas
OrchardSprays
cloud(~decrease, colpos * rowpos, groups = treatment, data = OrchardSprays)
source("~/R-práticas/Visualização_de_dados/PraticaDeVisualizacao_lattice.R", echo=TRUE)
cloud(decrease ~ colpos * rowpos, groups = treatment, data = OrchardSprays)
#Level plot
trees
levelplot(Girth ~ Height * Volume, data = trees)
help("read.csv")
dados = read.csv("dados.csv", sep = ";", na.strings = " ", stringsAsFactors =  TRUE)
source("~/.active-rstudio-document", echo=TRUE)
names(Debora_Nicolly) <- c("Nome", "Idade", "Telefone", "Gosta de doces?")
Debora_Nicolly
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
print(Olá)
Olá
print("Olá")
print("Olá, meu nome é ", eu, " E eu tenho ", idade, " Anos.")
cat("Olá, meu nome é ", eu, " E eu tenho ", idade, " Anos.")
cat("Olá, meu nome é ", eu, " E eu tenho ", idade, " Anos.")
paste("Olá, meu nome é ", eu, " E eu tenho ", idade, " Anos.")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
print("Olá, meu nome é ", eu, " E eu tenho ", idade, " Anos.")
cat("Olá, meu nome é ", eu, " E eu tenho ", idade, " Anos.")
paste("Olá, meu nome é ", eu, " E eu tenho ", idade, " Anos.")
help(matriz)
help(matriz)
help(??matriz)
Help(matriz)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
help(matrix)
matriz_temp <- matrix(trimestres, 4, byrom = TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
flights
source("~/AtividadeADS.R", echo=TRUE)
source("~/AtividadeADS.R", echo=TRUE)
install.packages("NHANES")
library(NHANES)
dados <- NHANES[, c("Age", "BMI", "BPSysAve")]
library(NHANES)
dados <- NHANES
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# 1) Distribuição de tempo no hospital
ggplot(diabetes_clean, aes(time_in_hospital)) +
geom_histogram(binwidth = 1, fill = "#69b3a2", color = "black") +
labs(
title = "Tempo no Hospital (dias)", x = "Dias", y = "Frequência") +
theme_minimal() +
theme(plot.title = element_text(hjust = 0.5))
source("C:/Users/Débora/Downloads/Projeto2ADS/Projeto2_ADS.R", echo=TRUE)
source("C:/Users/Débora/Downloads/Projeto2ADS/Projeto2_ADS.R", echo=TRUE)
source("C:/Users/Débora/Downloads/Projeto2ADS/Projeto2_ADS.R", echo=TRUE)
getwd()
setwd("C:/Users/Débora/OneDrive/Downloads/Projeto2ADS")
setwd("C:/Users/Débora/Downloads/Projeto2ADS")
source("C:/Users/Débora/Downloads/Projeto2ADS/Projeto2_ADS.R", echo=TRUE)
source("C:/Users/Débora/Downloads/Projeto2ADS/Projeto2_ADS.R", echo=TRUE)
source("C:/Users/Débora/Downloads/Projeto2ADS/Projeto2_ADS.R", echo=TRUE)
source("C:/Users/Débora/Downloads/Projeto2ADS/Projeto2_ADS.R", echo=TRUE)
source("C:/Users/Débora/Downloads/Projeto2ADS/Projeto2_ADS.R", echo=TRUE)
source("C:/Users/Débora/Downloads/Projeto2ADS/Projeto2_ADS.R", echo=TRUE)
